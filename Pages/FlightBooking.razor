@page "/flightbooking"
@using Assignment3.Data

<h3>Flight Finder</h3>

<form>
    <div class="form-group">
        <label for="departureAirport">From:</label>
        <select id="departureAirport" @bind="SelectedDepartureAirport">
            <option value="">Any</option>
            @foreach (var codeAir in AirportCodes)
            {
                <option value="@codeAir">@codeAir</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="arrivalAirport">To:</label>
        <select id="arrivalAirport" @bind="SelectedArrivalAirport">
            <option value="">Any</option>
            @foreach (var codeAir in AirportCodes)
            {
                <option value="@codeAir">@codeAir</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="day">Day:</label>
        <select id="day" @bind="SelectedDay">
            <option value="">Any</option>
            @foreach (var day in Days)
            {
                <option value="@day">@day</option>
            }
        </select>
    </div>

    <button type="button" @onclick="FindFlights">Find Flights</button>
</form>



<!-- Display the matched flights -->
@if (matchedFlights.Count > 0)
{
    <h4>Matched Flights:</h4>
    <div class="scrollable-list">
        <table>
            <tbody>
                @foreach (var flight in matchedFlights)
                {
                    <Button @onclick="() => SelectFlight(flight)">
                    <tr>
                        <td>@flight.FlightId</td>
                        <td>@flight.AirlineName</td>
                        <td>@flight.DepartureAirport</td>
                        <td>@flight.ArrivalAirport</td>
                        <td>@flight.Day</td>
                        <td>@flight.Time</td>
                        <td>@flight.Passengers</td>
                        <td>@flight.Cost</td>
                    </tr>
                    </Button>
                }
            </tbody>
        </table>
    </div>
}

<!-- Reservation form code -->

<h3>Reserve</h3>
@if (SelectedFlight != null)
{
    <h4>Make Reservation:</h4>
    <form class="form-group">
        <label for="flightCode">Flight Code:</label>
        <input id="flightCode" type="text" value="@SelectedFlight.FlightId" readonly />

        <label for="airline">Airline:</label>
        <input id="airline" type="text" value="@SelectedFlight.AirlineName" readonly />

        <label for="day">Day:</label>
        <input id="day" type="text" value="@SelectedFlight.Day" readonly />

        <label for="time">Time:</label>
        <input id="time" type="text" value="@SelectedFlight.Time" readonly />

        <label for="cost">Cost:</label>
        <input id="cost" type="text" value="@SelectedFlight.Cost" readonly />

        <label for="fullName">Full Name:</label>
        <input id="fullName" type="text" @bind="FullName" />

        <label for="citizenship">Citizenship:</label>
        <input id="citizenship" type="text" @bind="Citizenship" />

        <button type="button" @onclick="MakeReservation">Make Reservation</button>
    </form>
}

<style>
    .form-group label,
    .form-group select {
        display: block;
    }

    .form-group {
        margin-bottom: 1em;
    }

    .scrollable-list {
        max-height: 300px; /* adjust this value as needed */
        overflow-y: auto;
    }


</style>


@code {
    public List<Flight> flights = new List<Flight>();
    public List<Flight> matchedFlights = new List<Flight>();
    public List<string> AirportCodes { get; set; } = new List<string>();
    public List<string> Days { get; set; } = new List<string> { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
    public string SelectedDepartureAirport { get; set; }
    public string SelectedArrivalAirport { get; set; }
    public string SelectedDay { get; set; }
    public Flight SelectedFlight { get; set; }
    public string FullName { get; set; }
    public string Citizenship { get; set; }
    public List<Reservation> reservations = new List<Reservation>();

    public string errorMessage;




    protected override async Task OnInitializedAsync()
    {
        await LoadFlights();
    }

    public async Task LoadFlights()
    {
        try
        {
            string[] lines = await System.IO.File.ReadAllLinesAsync("/Users/jessemunro/Projects/Assignment3/Resources/Raw/flights.csv");

            foreach (string line in lines)
            {
                string[] parts = line.Split(',');

                Flight flight = new Flight(
                    flightId: parts[0],
                    airlineName: parts[1],
                    departureAirport: parts[2],
                    arrivalAirport: parts[3],
                    day: parts[4],
                    time: parts[5],
                    passengers: int.Parse(parts[6]),
                    cost: decimal.Parse(parts[7])
                );

                flights.Add(flight);


                if (!AirportCodes.Contains(flight.DepartureAirport))
                {
                    AirportCodes.Add(flight.DepartureAirport);
                }
                if (!AirportCodes.Contains(flight.ArrivalAirport))
                {
                    AirportCodes.Add(flight.ArrivalAirport);
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public void FindFlights()
    {
        matchedFlights = flights
            .Where(f =>
                (SelectedDepartureAirport == "" || f.DepartureAirport == SelectedDepartureAirport) &&
                (SelectedArrivalAirport == "" || f.ArrivalAirport == SelectedArrivalAirport) &&
                (SelectedDay == "" || f.Day == SelectedDay)
            )
            .ToList();

    }



    public void SelectFlight(Flight flight)
    {
        SelectedFlight = flight;
    }


    public void MakeReservation()
    {
        if (SelectedFlight == null)
        {
            errorMessage = "Please select a flight.";
            return;
        }

        if (string.IsNullOrWhiteSpace(FullName))
        {
            errorMessage = "Please enter the traveler's full name.";
            return;
        }

        if (string.IsNullOrWhiteSpace(Citizenship))
        {
            errorMessage = "Please enter the traveler's citizenship.";
            return;
        }

        try
        {
            string reservationCode = GenerateReservationCode();
            Reservation reservation = new Reservation(reservationCode, SelectedFlight, FullName, Citizenship, "active");

            // Save the reservation to the reservations.csv file
            string filePath = "/Users/jessemunro/Projects/Assignment3/Resources/Raw/reservations.csv";
            string reservationData = $"{reservation.ReservationCode},{reservation.SelectedFlight.FlightId},{reservation.SelectedFlight.AirlineName},{reservation.SelectedFlight.Cost},{reservation.FullName},{reservation.Citizenship},{reservation.Status}";
            File.AppendAllText(filePath, $"{reservationData}\n");

            // Reset fields and display success message
            SelectedFlight = null;
            FullName = string.Empty;
            Citizenship = string.Empty;
            errorMessage = "Reservation successfully made.";
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private string GenerateReservationCode()
    {
        // Generate a reservation code in the format: LDDDD (e.g., I1234)
        string letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";


        Random random = new Random();
        string code = $"{letters[random.Next(letters.Length)]}{random.Next(1000, 10000)}";

        return code;
    }
}
